# allow mouse use
set-option -g mouse on
# let colors pass through
set -g default-terminal "xterm-256color"
# disallow tmux from renaming windows, this way my custom name isn't overwritten
set-option -g allow-rename off
set-option -g renumber-windows on
bind-key -n MouseDrag1Status swap-window -d -t=
setw -g aggressive-resize on
set -s escape-time 0
# have window indices start from 1
set -g base-index 1
bind-key C-b last-window

# Create a new window using the current pane's directory as the new window's directory
bind c new-window -c "#{pane_current_path}"
# split panes horizontally/vertically using the current pane's directory as the new pane's directory
bind '"' split-window -h -c '#{pane_current_path}'
bind % split-window -v -c '#{pane_current_path}'
# reload
bind r run-shell 'tmux source ~/.tmux.conf && tmux display-message "Reloaded TMUX..."'
# use alt/meta + arrow to navigate windows
bind-key -n M-Left previous-window
bind-key -n M-RIght next-window
# toggle zoom on pane
bind-key -n M-z resize-pane -Z

# popup
bind -n M-t if-shell -F '#{==:#{session_name},popup}' {
    # TODO: Find a way to programatically close the popup. For now I need to manually type control+c or escape
} {
   display-popup -d '#{pane_current_path}' -w90% -h90% "tmux attach -t popup || tmux new -s popup"
}

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-Left if-shell "$is_vim" 'send-keys C-Left'  'select-pane -L'
bind-key -n C-Down if-shell "$is_vim" 'send-keys C-Down'  'select-pane -D'
bind-key -n C-Up if-shell "$is_vim" 'send-keys C-Up'  'select-pane -U'
bind-key -n C-Right if-shell "$is_vim" 'send-keys C-Right'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\\\'  'select-pane -l'"
bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-\' select-pane -l

# status bar configuration
#######################################
set -g @activecolor 'magenta'
set -g @inactivecolor 'black'
set -g @bordercolor 'black'
# Panes
set -g pane-border-lines heavy
set -g pane-active-border-style "fg=#{@activecolor}"
set -g pane-border-style "fg=#{@bordercolor}"
setw -g pane-border-status off
# Clock Mode
setw -g clock-mode-colour 'cyan'
# Messages
set -g message-style "bg=terminal,fg=#{@activecolor}"
set -g message-command-style "bg=#{@bordercolor},fg=#{@altcolor}"
# Bars
set -g status-interval 1
set -g status on
set -g status-style "#{?client_prefix,strikethrough#,fg=#{@activecolor}#,bg=terminal#,nobold,bg=terminal#,fg=#{@bordercolor}#,strikethrough#,nobold#,overline}"
set -g status-right ""
set -g status-left "#[nostrikethrough,fg=#{@bordercolor}][#[fg=#{@activecolor}]#S#[fg=#{@bordercolor}]]"
# Windows
set -g status-justify right
set -g window-status-format "#[nostrikethrough,fg=#{@bordercolor}][#[fg=#{@inactivecolor}]#I:#W#[fg=#{@bordercolor}]]"
set -g window-status-current-format "#[nostrikethrough,fg=#{@bordercolor}][#[fg=#{@activecolor}]#I:#W#F#[fg=#{@bordercolor}]]"
set -g window-status-separator "#[strikethrough,#{?client_prefix,fg=#{@activecolor},fg=#{@bordercolor}}]  "

# Plugins
#######################################
# tmux plugin manager
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
    set -g @scroll-without-changing-pane "on"
    set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"
# allows saving the state of tmux to a file so it can be restored later
set -g @plugin 'tmux-plugins/tmux-resurrect'
    set -g @resurrect-processes '"~watch" mosh-client'
# Uses tmux-resurrect to continuously save the current tmux session at a specified interval.
# NOTE: continuum must be the last plugin listed: https://github.com/tmux-plugins/tmux-continuum#known-issues
set -g @plugin 'tmux-plugins/tmux-continuum'
    set -g @continuum-restore 'on' # Automatically restore session when tmux is started
    set -g @continuum-save-interval '1' # measured in minutes
# Start the plugin manager
run '~/.tmux/plugins/tpm/tpm'
