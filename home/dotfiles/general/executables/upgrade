#!/usr/bin/env fish

# helpers
function print_banner --argument-names message
    echo
    echo -s (set_color blue) $message (set_color normal)
    echo -s (set_color blue) (string repeat --count 40 â”€) (set_color normal)
end

# upgrade/cleanup packages in all package managers
function upgrade
    # If arguments are passed, assume they are package manager names and only upgrade those ones
    if test (count $argv) -gt 0
        for package_manager in $argv
            set function_name "upgrade-$package_manager"
            if functions --query $function_name
                eval $function_name
            else
                echo -e -s \n (set_color red) "error: No upgrader found for '$package_manager'"
            end
        end

        return
    end

    # NOTE: Should be first because otherwise other tools might try to perform upgrades
    # that have already been performed on another machine and just need to be pulled in.
    # Also, if upgrading a tool results in a dotfile being changed, (e.g. neovim snapshot)
    # then pulling dotfiles afterwards might cause a merge conflict.
    if pushd ~/.dotfiles
        if git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null
            upgrade-dotfiles
        end
        popd
    end

    type --query nix
    and upgrade-nix

    type --query home-manager
    and upgrade-home-manager

    # TODO: The Pop Shop is slow and doesn't have a progress indicator so I'll use the commandline for now.
    type --query apt
    and type --query apt-get
    and upgrade-debian
    type --query flatpak
    and upgrade-flatpak

    test -d ~/.fluent-theme
    and upgrade-fluent

    # NOTE: This should be last so that all changes produced by any upgrade are included in the commit.
    if pushd ~/.dotfiles
        if git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null
            make_commit_in_dotfiles
        end
        popd
    end
end

function upgrade-debian
    print_banner 'DEBIAN'

    sudo apt update
    sudo apt-get --assume-yes --with-new-pkgs upgrade
    sudo apt-get --assume-yes autoremove
end

function upgrade-flatpak
    print_banner 'FLATPAK'
    flatpak update --assumeyes
end

function upgrade-dotfiles
    print_banner 'DOTFILES'

    # return if there is nothing to pull
    chronic git fetch
    if test -z "$(git log HEAD..@{u} --oneline)"
        echo 'Nothing to do.'
        return
    end

    # Show the new commits that would be pulled
    echo 'Commits made since last pull:'
    git log ..@{u}
    echo

    # if there are changes, warn the user in the prompt
    set status_output "$(git status --porcelain)"
    if test -n "$status_output"
        set warning "$(echo -s (set_color yellow) ' (WARNING: The working directory is not clean)' (set_color normal))"
    else
        set warning ''
    end
    read --prompt-str "Would you like to update$warning? (y/n): " --nchars 1 response
    if test $response = 'y'
        git pull
    end
end

function make_commit_in_dotfiles
    print_banner 'DOTFILES COMMIT'

    # check if there are changes to commit
    set status_output "$(git status --porcelain)"
    if test -n "$status_output"
        git status
        read --prompt-str "Do you want to make a commit to your dotfiles? (y/n): " --nchars 1 response
        if test $response = 'y'
            git add --all
            git commit --message 'chore: upgrade tools'
            git push
        end
    else
        echo 'Nothing to commit.'
    end
end

function upgrade-fluent
    print_banner 'Fluent Theme'

    # TODO: If this gets removed, remove the popd below as well
    if not pushd ~/.fluent-theme
        return
    end

    if not git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null
        return
    end

    chronic git fetch --tags
    set latest_release "$(git ls-remote --refs --sort='version:refname' --tags 'https://github.com/vinceliuice/Fluent-gtk-theme.git' | cut -d/ -f3- | tail -n 1)"
    set current_release "$(git describe --tags)"
    if test "$current_release" != "$latest_release"
        git checkout "$latest_release"
        ./install.sh --theme all --icon popos --libadwaita --tweaks round
    else
        echo 'Nothing to do'
    end

    # TODO: If this gets removed, remove the pushd above as well
    popd
end

# I have two users for my Nix multi-user installation, root and myself. Most nix commands only operate on the
# current user's profile so this function lets me run a command for both root and myself.
function run_as_current_and_root_user --argument-names nix_command
    # Run for the current user
    eval "$nix_command"
    # Run for the root user. Nix determines the current user based on $HOME so I use --set-home to set $HOME to the
    # root user's $HOME.
    eval "sudo --set-home $nix_command"
end
function upgrade-nix-system
    print_banner 'Nix'

    read --prompt-str 'Would you like to update? (y/n): ' --nchars 1 response
    if test $response != 'y'
        return
    end

    run_as_current_and_root_user 'nix-channel --update'

    # Now that the channels are updated, upgrade the packages.
    run_as_current_and_root_user 'nix-env --upgrade "*"'

    # Upgrade my host manager flake. This could be home-manager nix-darwin, etc.
    host-manager-upgrade

    # Delete all generations besides the last two in case I want to rollback.
    run_as_current_and_root_user 'nix-env --delete-generations +2'
    if type --query home-manager
        # TODO: There's an issue for adding an option to specify the number of generations to keep, like
        # `nix-env --delete-generations`.
        # issue: https://github.com/nix-community/home-manager/issues/3325
        #
        # TODO: I'm also not bothering to try and keep the last two generations since Home Manger doesn't support
        # rollbacks yet.
        # issue: https://github.com/nix-community/home-manager/issues/1114
        #
        # TODO: figure out how to remove all gens besides the current one
    end

    # With all the old generations deleted, collect garbage.
    # TODO: I think I only need to run this as root and it will include other users, but just to be safe I'll
    # run it twice.
    run_as_current_and_root_user nix-collect-garbage
end

upgrade $argv
