# vim:foldmethod=marker

# Miscellaneous {{{
# allow mouse use
set-option -g mouse on
# Set the terminal's color capability to 256 colors. TMUX will then set its $TERM environment variable to this value.
set -g default-terminal "tmux-256color"
# don't allow programs running in a pane to change the window title with an escape sequence
set-option -g allow-rename off
# Let tmux automatically rename windows, unless I manually set a name for that window
set -g automatic-rename on
set-option -g renumber-windows on
bind-key -n MouseDrag1Status swap-window -d -t=
setw -g aggressive-resize on
set -s escape-time 0
# have window indices start from 1
set -g base-index 1
set -g prefix C-Space
set -g pane-border-format '#{?#{m/r:copy-mode,#{pane_mode}},#[bold fg=colour3] #{@copy_symbol} COPY ,}'
set-option -g display-time 2000
set-option -g set-titles on
set-option -g set-titles-string '#T'
# When a client becomes active, run attach-session which will update the environment
set-hook -g client-active attach-session
set-option -g allow-passthrough on
# The output from ':checkhealth' in neovim says 'autoread' might not work if this isn't set.
set-option -g focus-events on
set -g set-clipboard on
set-option -g detach-on-destroy off

# By setting a default-command, tmux won't use its default behaviour which creates a login shell
# for new windows.
#
# WARNING: Don't set this value to anything 'too complicated' since it will break tmux resurrect. Values that are known
# to break it are 'exec ${SHELL}' and anything containing '&&' or '||'.
# issue: https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_pane_contents.md#known-issue
#
# TODO: Setting this breaks tmux-resurrect because the default-command will be become a child process of the pane and
# tmux-resurrect will restore the default-command process instead of what we actually want to restore, the child of
# the default-command. (Maybe TMUX should run the default-command with `exec`)
# set -g default-command "${SHELL}"

# Create a new window using the current pane's directory as the new window's directory
bind t new-window -c "#{pane_current_path}"
# split panes horizontally/vertically using the current pane's directory as the new pane's directory
bind '|' split-window -h -c '#{pane_current_path}'
bind '-' split-window -v -c '#{pane_current_path}'
bind-key -n M-s choose-tree -Zs
bind s run-shell -b "${TMUX_PLUGIN_MANAGER_PATH}resurrect/scripts/save.sh"

# Border characters for statusbar indicators
set -g @left_symbol "\ue0b6"
set -g @right_symbol "\ue0b4"

# reload
set -g @reload_symbol "\ue348 "
bind r run-shell -b 'tmux source ~/.config/tmux/tmux.conf\; set @mode_indicator_custom_prompt "#[bold bg=#{@bgcolor} fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@reload_symbol} RELOADED#[noreverse]#{@right_symbol}"\; refresh-client -S; sleep $(( $(tmux display -p "#{display-time}") / 1000 )); tmux set -u @mode_indicator_custom_prompt\; refresh-client -S'

bind-key -T copy-mode C-MouseDown1Pane select-pane \; run-shell 'tmux-click-url.py "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" >/dev/null 2>&1' \; send-keys -M
bind-key -T copy-mode-vi C-MouseDown1Pane select-pane \; run-shell 'tmux-click-url.py "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" >/dev/null 2>&1' \; send-keys -M
bind-key -T root C-MouseDown1Pane select-pane -t = \; run-shell 'tmux-click-url.py "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" >/dev/null 2>&1' \; send-keys -M

# navigate windows. These keys are sent by the terminal since the actual keys I use don't work now
# since TMUX lost suuport for extended keys.
# TODO: tmux issue: https://github.com/tmux/tmux/issues/2705#issuecomment-841133549
bind-key -n F10 previous-window
bind-key -n F12 next-window
# toggle zoom on pane
bind-key -n M-m resize-pane -Z
# change highlight color
set -g mode-style "fg=colour0,bg=colour3"
set -g fill-character '╱'
# resize panes
bind-key -n M-Left resize-pane -L
bind-key -n M-Right resize-pane -R
bind-key -n M-Up resize-pane -U
bind-key -n M-Down resize-pane -D
# switch windows with alt+<window number>
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9
# Make a new window by clicking the new window button
bind-key -T root MouseDown1StatusRight new-window -c "#{pane_current_path}"
# Go to the last (previously selected) window
bind-key -n M-BSpace last-window

# scratchpad session
bind -n M-t if-shell -F '#{==:#{session_name},scratch}' {
    switch-client -l
} {
    new-session -A -c '#{pane_current_path}' -s scratch 
}

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" 'send-keys M-h'  'select-pane -L -Z'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j'  'select-pane -D -Z'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k'  'select-pane -U -Z'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l'  'select-pane -R -Z'

# Enable hyperlinks
set -ga terminal-features "*:hyperlinks"

# Clipboard copying
set -ga terminal-features "*:clipboard"
# TODO: I might not need this if tmux's default copy command works when tmux is being run remotely
if-shell "command -v osc-copy" {
    set -g copy-command "osc-copy"
}

# Context menus stay up after releasing the mouse
bind-key    -T root         MouseDown3Pane        if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}$}}" { select-pane -t = ; send-keys -M } { display-menu -O -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer -w "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer -w "#{q:mouse_line}" } '' "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer -w "#{q:mouse_hyperlink}" } '' "Vertical Split" v { split-window -h -c "#{pane_current_path}" } "Horizontal Split" h { split-window -v -c "#{pane_current_path}" } '' "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } '' Kill X { kill-pane } Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } }
bind-key    -T root         MouseDown3Status      display-menu -O -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y W "#{?#{>:#{session_windows},1},,-}Swap Left" l { swap-window -t :-1 } "#{?#{>:#{session_windows},1},,-}Swap Right" r { swap-window -t :+1 } "#{?pane_marked_set,,-}Swap Marked" s { swap-window } '' Kill X { kill-window } Respawn R { respawn-window -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } } '' "New After" w { new-window -a } "New At End" W { new-window }
bind-key    -T root         MouseDown3StatusLeft  display-menu -O -T "#[align=centre]#{session_name}" -t = -x M -y W Next n { switch-client -n } Previous p { switch-client -p } '' Renumber N { move-window -r } Rename n { command-prompt -I "#S" { rename-session "%%" } } '' "New Session" s { new-session } "New Window" w { new-window } "Choose Session" alt+s { choose-tree -Zs }
bind-key    -T root         M-MouseDown3Pane      display-menu -O -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer -w "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer -w "#{q:mouse_line}" } '' "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer -w "#{q:mouse_hyperlink}" } '' "Vertical Split" v { split-window -h -c "#{pane_current_path}" } "Horizontal Split" h { split-window -v -c "#{pane_current_path}" } '' "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } '' Kill X { kill-pane } Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z }
bind-key    -T prefix       <                     display-menu -O -T "#[align=centre]#{window_index}:#{window_name}" -x W -y W "#{?#{>:#{session_windows},1},,-}Swap Left" l { swap-window -t :-1 } "#{?#{>:#{session_windows},1},,-}Swap Right" r { swap-window -t :+1 } "#{?pane_marked_set,,-}Swap Marked" s { swap-window } '' Kill X { kill-window } Respawn R { respawn-window -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } } '' "New After" w { new-window -a } "New At End" W { new-window }
bind-key    -T prefix       >                     display-menu -O -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer -w "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer -w "#{q:mouse_line}" } '' "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer -w "#{q:mouse_hyperlink}" } '' "Vertical Split" v { split-window -h -c "#{pane_current_path}" } "Horizontal Split" h { split-window -v -c "#{pane_current_path}" } '' "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } '' Kill X { kill-pane } Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z }

set-option -g status-keys emacs

set-option -g history-limit 50000
# }}}

# Aesthetics {{{
set -g @bordercolor 'colour8'
set -g @standoutcolor 'colour5'
set -g @bgcolor 'terminal'

# status bar configuration
set -g status-position bottom
set -g pane-border-status bottom

# Panes
set -g pane-border-lines single
set -g pane-active-border-style "fg=colour6"
set -g pane-border-style "fg=colour15"

# Clock Mode
set -g clock-mode-colour 'cyan'
set -g clock-mode-style 24

# Messages
set -g message-style "bg=#{@bgcolor},fg=#{@standoutcolor}"

# Bars
set -g status-interval 1
set -g status on
set -g status-style "bg=#{@bgcolor},fg=terminal,push-default"

# Remove the window status. I'll add it to the statusbar manually
set -g window-status-format ''
set -g window-status-current-format ''

set -g @new_window_symbol "＋"
set -g @zoom_indicator " \uf792 "
set -g @superscript_number "python -c \"import sys; index = int(sys.argv[1]); superscript_numbers = ['¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹']; print(superscript_numbers[index - 1] if index <= 9 else '⁺')\""
set -g @window-status-format "#[range=window|#{window_index}]#[fg=colour15]#(#{@superscript_number} #I) #W"
set -g @window-status-current-format "#[range=window|#{window_index}]#[fg=colour6]#(#{@superscript_number} #I)#[fg=terminal] #W#{?window_zoomed_flag,#[fg=#{@standoutcolor}#,nounderscore]#{@zoom_indicator},}#[nounderscore]"
set -g @window-info-format "#{W: #{E:@window-status-format} , #{E:@window-status-current-format} }#[range=right] #[fg=colour15]#{@new_window_symbol}"
set -g status-left "#{E:@window-info-format}#{tmux_mode_indicator}"
set -g status-left-length 999

set -g @session "#[range=left]#[bg=default,fg=default]#S"
set -g status-right "#{E:@session} "
set -g status-right-length 999

set -g popup-border-lines heavy
set -g popup-border-style "fg=#{@bordercolor}"
# }}}

# Plugins {{{
# tmux-better-mouse-mode
set -g @scroll-without-changing-pane "on"
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# tmux-resurrect: Saves the state of tmux to a file so it can be restored later
#
# TODO: I want to restore any arguments that were passed to neovim, but the problem is that the Nix wrapper
# for neovim calls the actual neovim binary with arguments that contain spaces. The only platform
# where resurrect can retain spaces in arguments, without splitting them into separate arguments, is Linux
# with the 'linux_procfs' strategy. So here I only set arguments to be replaced if I'm on Linux.
# issue: https://github.com/tmux-plugins/tmux-resurrect/issues/60
set -g @nvim_resurrect '"~nvim->nvim"'
if-shell "uname | grep -q Linux" {
    # TODO: Restoring commands with spaces is not working on Linux, though it should with procfs as the restore
    # strategy. Until it's fixed, I will not restore arguments on Linux either for the reason in the TODO above.
    set -g @nvim_resurrect '"~nvim->nvim"'
}
set -gF @resurrect-processes 'watch viddy mosh-client #{@nvim_resurrect} ssh autossh man less tail fzf "git ui" gitui ncdu cloudflared "~nix repl->nix repl" "~manix->manix"'
# This strategy can restore quotes on the commandline so that the spaces in arguments are retained.
# e.g. `echo 'one argument with spaces'`. Only supports linux though
if-shell "uname | grep -q Linux" "set -g @resurrect-save-command-strategy 'linux_procfs'"
set -g @resurrect-capture-pane-contents 'on'

# tmux-mode-indicator
set -g @prefix_symbol "\uf80b "
set -g @copy_symbol "\uf68e "
set -g @sync_symbol "\uf46a "
set -g @mode_indicator_prefix_prompt "#[bold bg=default fg=#{@standoutcolor} align=centre]#[blink]#{@prefix_symbol} PREFIX"
set -g @mode_indicator_sync_prompt "#[bold bg=default fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@sync_symbol} SYNC#[noreverse]#{@right_symbol}"
set -g @mode_indicator_copy_prompt '#[bg=default] '
set -g @mode_indicator_empty_prompt '#[bg=default] '

# tmux-suspend
set -g @suspended_symbol "\uf80e "
set -g @suspend_key 'M-z'
# I prepend pane-border-format instead of overwriting it so if two windows are in a mode (e.g. copy and suspended),
# or one window is in two modes, both border indicators will be displayed.
#
# The `#{l:}` is so the formats inside of it don't get evaluated when this variable is set. This way if the active
# pane changes, the suspended icon will move to the newly active pane.
set -g @suspend_suspended_options " \
    pane-border-format::#{l:#{?pane_active\\,#[bold fg=#{@standoutcolor}] #{@suspended_symbol} SUSPENDED \\,}}#{s/,/\\\\,/:pane-border-format}, \
"

# tmux-continuum: Uses tmux-resurrect to continuously save the current tmux session at a specified interval.
set -g @continuum-restore 'on' # Automatically restore session when tmux is started
set -g @continuum-save-interval '1' # measured in minutes
# }}}
