# vim:foldmethod=marker

# Miscellaneous {{{
# allow mouse use
set-option -g mouse on
# Set the terminal's color capability to 256 colors. TMUX will then set its
# $TERM environment variable to this value.
set -g default-terminal "tmux-256color"
# By default TMUX uses a login shell which I don't want since I've already run
# the login shell by the time I launch TMUX and running it again was causing the
# $PATH to get messed up. More on how it was messed up (TLDR: macOS moves its
# $PATH entries to the front if you rerun its path_helper):
# https://gist.github.com/Linerre/f11ad4a6a934dcf01ee8415c9457e7b2#what-does-it-break
set -g default-command "default-shell"
# don't allow programs running in a pane to change the window title with an
# escape sequence
set-option -g allow-rename off
# Let tmux automatically rename windows, unless I manually set a name for that
# window
set -g automatic-rename on
set -g automatic-rename-format '#{pane_title}'
set-option -g renumber-windows on
setw -g aggressive-resize on
# have window indices start from 1
set -g base-index 1
set -g prefix C-Space
set -g pane-border-format '#{?#{m/r:copy-mode,#{pane_mode}},#[fg=terminal align=centre]   COPY MODE ,}'
set-option -g display-time 2000
set-option -g set-titles on
set-option -g set-titles-string '#T'
# When a client becomes active, run attach-session which will update the
# environment
set-hook -g client-active attach-session
set-option -g allow-passthrough all
# The output from ':checkhealth' in neovim says 'autoread' might not work if
# this isn't set.
set-option -g focus-events on
set-option -g detach-on-destroy off
# This seems like a reasonable value, based on the discussions here on a new
# default: https://github.com/tmux/tmux/issues/3844 They settled on 10, but that
# caused issue for me in vscode so I'm keeping 15
set -s escape-time 15

# Enable all terminal features
set -ga terminal-features "*:hyperlinks"
set -ga terminal-features "*:clipboard"
set -ga terminal-features "*:sixel"
set -ga terminal-features "*:sync"
# truecolor
set -ga terminal-features "*:RGB"
# underline styles
set -ga terminal-features "*:usstyle"

# change highlight color
set -g mode-style "reverse"
set -g fill-character '╱'

# Clipboard copying This means tmux will set the external clipboard when text
# is copied in copy-mode and allows programs running inside tmux to set it as
# well. For more info: https://github.com/tmux/tmux/wiki/Clipboard
set -g set-clipboard on

set-option -g status-keys emacs

# In emacs mode, when selecting text from left to right, the last
# character won't be copied since that's how it works in emacs. I'm
# using vi mode because I find that behavior unintuitive.  See:
# https://github.com/tmux/tmux/issues/3139
set-option -g mode-keys vi

set-option -g history-limit 50000

# This way I can tell if the active tmux client is vscode's integrated terminal.
set-option -ga update-environment " VSCODE_INJECTION"
# }}}

# Bindings {{{
# reorder windows by dragging the mouse
bind-key -n MouseDrag1Status swap-window -d -t=

# Create a new window using the current pane's directory as the new window's directory
bind -n M-t new-window -c "#{pane_current_path}"

# reload
bind -n M-r run-shell -b 'tmux-config-reload'

# Open the url under the cursor in the browser. My terminal can do this, but
# it doesn't work when the url spans multiple lines in a tmux pane, since my
# terminal is not aware of the tmux pane boundaries.
bind-key -T copy-mode C-MouseUp1Pane select-pane \; run-shell 'tmux-click-url "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" "#{pane_width}" 2>&1' \; send-keys -M
bind-key -T copy-mode-vi C-MouseUp1Pane select-pane \; run-shell 'tmux-click-url "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" "#{pane_width}" 2>&1' \; send-keys -M
bind-key -T root C-MouseUp1Pane select-pane -t = \; run-shell 'tmux-click-url "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" "#{pane_width}" 2>&1' \; send-keys -M

bind-key -n M-[ previous-window
bind-key -n M-] next-window

# toggle zoom on pane
bind-key -n M-m resize-pane -Z

# resize panes
bind-key -n M-Left resize-pane -L
bind-key -n M-Right resize-pane -R
bind-key -n M-Up resize-pane -U
bind-key -n M-Down resize-pane -D

# switch windows with alt+<window number>
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Make a new window by clicking the new window button
bind-key -T root MouseUp1StatusLeft new-window -c "#{pane_current_path}"

# Go to the previously selected window
bind-key -n M-BSpace last-window

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
set -g @is_vim "ps -o state= -o comm= -t \"$(tmux display-message -p '#{pane_tty}')\" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|.nvim-wrapped)(diff)?$'"
bind-key -n M-h if-shell "#{@is_vim}" 'send-keys M-h'  'select-pane -L -Z'
bind-key -n M-j if-shell "#{@is_vim}" 'send-keys M-j'  'select-pane -D -Z'
bind-key -n M-k if-shell "#{@is_vim}" 'send-keys M-k'  'select-pane -U -Z'
bind-key -n M-l if-shell "#{@is_vim}" 'send-keys M-l'  'select-pane -R -Z'

# Open context menus on right click
bind-key -T root MouseDown3Pane \
    if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}$}}" \
        { \
            select-pane -t = ; send-keys -M \
        } \
        { \
            display-menu -O -t = -x M -y M \
                "Vertical Split" v { split-window -h -c "#{pane_current_path}" } \
                "Horizontal Split" h { split-window -v -c "#{pane_current_path}" } \
                '' \
                "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } \
                "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } \
                '' \
                Kill X { kill-pane } \
                Respawn R { respawn-pane -k } \
                "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } \
        }
bind-key -T root MouseDown3Status \
    display-menu -O -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y W \
        Kill X { kill-window } \
        Respawn R { respawn-window -k } \
        Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } }
bind-key -T root MouseUp1StatusRight \
    display-menu -O -t = -x M -y W \
        "New Window" w { new-window } \
        "New Session" s { new-session } \
        "Rename Session" r { command-prompt -I "#S" { rename-session "%%" } } \
        "Choose Session" c { choose-tree -Zs } \
        "Copy Mode" y { copy-mode } \
        "Pane Sync Mode" = { setw synchronize-panes }

bind '|' split-window -h -c '#{pane_current_path}'
bind '-' split-window -v -c '#{pane_current_path}'
bind-key -n M-s choose-tree -Zs

# reduce scroll speed in copy mode
bind-key -T copy-mode-vi WheelUpPane send-keys -X scroll-up \; send-keys -X scroll-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X scroll-down \; send-keys -X scroll-down

bind-key -n M-= set-window-option synchronize-panes
# }}}

# Aesthetics {{{
set -g @bordercolor 'colour8'
set -g @standoutcolor 'colour7'
set -g @bgcolor 'terminal'

# context menu
set -g menu-selected-style "fg=colour0 bg=colour7"
set -g menu-border-style "fg=#{@bordercolor}"
set -g menu-border-lines rounded

# status bar configuration
set -g status-position bottom
set -g pane-border-status bottom

# Panes
set -g pane-border-lines single
set -gF pane-active-border-style "fg=#{@bordercolor}"
set -g pane-border-style "fg=#{@bordercolor}"

# Clock Mode
set -g clock-mode-colour 'cyan'
set -g clock-mode-style 24

# Messages
set -g message-style "bg=#{@bgcolor},fg=#{@standoutcolor}"

# Bars
set -g status-interval 1
set -g status on
set -g @accentcolor 'colour14'
set -g @fgcolor 'terminal'
set -g @bgcolor2 'colour8'
set-hook -g client-focus-out "set -g @accentcolor 'colour8'; set -g @fgcolor 'colour8'"
set-option -gF client-focus-in "set -g @accentcolor '#{@accentcolor}'; set -g @fgcolor 'terminal'"
set -g status-style "bg=#{@bgcolor},fg=#{@fgcolor},push-default"

# Remove the window status. I'll add it to the statusbar manually
set -g window-status-format ''
set -g window-status-current-format ''

# Left half of status bar
set -g @digit_icon "sh -c 'case $0 in 1) printf %s 󰬺\\  ;; 2) printf %s 󰬻\\  ;; 3) printf %s 󰬼\\  ;; 4) printf %s 󰬽\\  ;; 5) printf %s 󰬾\\  ;; 6) printf %s 󰬿\\  ;; 7) printf %s 󰭀\\  ;; 8) printf %s 󰭁\\  ;; 9) printf %s 󰭂\\  ;; *) printf %s 󰿮\\  ;; esac'"
set -g @window-status-format "#[range=window|#{window_index} fg=colour8] #(#{@digit_icon} #I)"
set -g @window-status-current-format "#[range=window|#{window_index} us=#{@accentcolor} fg=#{@fgcolor}] #[underscore]#(#{@digit_icon} #I)#[nounderscore]#{?window_zoomed_flag, #[fg=#{@accentcolor}] #[fg=default],}#{?pane_synchronized, #[fg=#{@accentcolor}] #[fg=default],}"
set -g @window-info-format "#{W:#{E:@window-status-format}  ,#{E:@window-status-current-format}  }#[range=left fg=colour8]  "
set -g status-left "#{E:@window-info-format}"
set -g status-left-length 999
set @mode_indicator_custom_prompt "#[bg=#{@bgcolor} fg=default]  RELOADING..."

# Right half of status bar
set -g status-right '#{tmux_mode_indicator}  #[fg=colour8]  '
set -g status-right-length 999

# Popups
set -g popup-border-lines heavy
set -g popup-border-style "fg=#{@bordercolor}"
# }}}

# Plugins {{{
# tmux-better-mouse-mode
set -g @scroll-without-changing-pane "on"
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"
set -g @scroll-speed-num-lines-per-scroll '1'

# tmux-resurrect: Saves the state of tmux to a file so it can be restored later
#
# TODO: I want to restore any arguments that were passed to neovim, but
# the problem is that the Nix wrapper for neovim calls the actual neovim
# binary with arguments that contain spaces. The only platform where
# resurrect can retain spaces in arguments, without splitting them into
# separate arguments, is Linux with the 'linux_procfs' strategy. So
# here I only set arguments to be replaced if I'm on Linux. issue:
# https://github.com/tmux-plugins/tmux-resurrect/issues/60
set -g @nvim_resurrect '"~nvim->nvim"'
if-shell "uname | grep -q Linux" {
    # TODO: Restoring commands with spaces is not working on Linux, though it
    # should with procfs as the restore strategy. Until it's fixed, I will not
    # restore arguments on Linux either for the reason in the TODO above.
    set -g @nvim_resurrect '"~nvim->nvim"'
}
# "~sh" is to match "/bin/sh <path_to_man> <manpage>"
set -gF @resurrect-processes 'watch viddy #{@nvim_resurrect} ssh autossh man ~sh less tail fzf cloudflared "~nix repl->nix repl"'
# This strategy can restore quotes on the commandline so that the spaces in
# arguments are retained. e.g. `echo 'one argument with spaces'`. Only supports
# linux though
if-shell "uname | grep -q Linux" "set -g @resurrect-save-command-strategy 'linux_procfs'"
set -g @resurrect-capture-pane-contents 'on'

# tmux-mode-indicator
set -g @mode_indicator_empty_prompt '#[range=right bg=default fg=colour8 align=right] #S'
set -g @mode_indicator_prefix_prompt "#[bold bg=default fg=terminal align=right blink]󰌌  PREFIX MODE"
# I have an indicator for this embedded in the border of the pane in copy-mode
# so I don't need one here
set -gF @mode_indicator_copy_prompt '#{@mode_indicator_empty_prompt}'
# I have an indicator for this next to the window name so I don't need one here
set -gF @mode_indicator_sync_prompt '#{@mode_indicator_empty_prompt}'

# tmux-suspend
set -g @suspend_key 'M-z'
# I prepend pane-border-format instead of overwriting it so if two windows are
# in a mode (e.g. copy and suspended), or one window is in two modes, both
# border indicators will be displayed.
#
# The `#{l:}` is so the formats inside of it don't get evaluated when this
# variable is set. This way if the active pane changes, the suspended icon will
# move to the newly active pane.
set -g @suspend_suspended_options " \
    pane-border-format::#[align=centre] 󰒲  suspended , \
    status::off, \
"

# tmux-continuum: Uses tmux-resurrect to continuously save the current tmux
# session at a specified interval.
set -g @continuum-restore 'on' # Automatically restore session when tmux is started
set -g @continuum-save-interval '1' # measured in minutes

# tmux-sidebar
set -g @sidebar-tree 'e'
# The `rm` removes any existing broot socket files since broot won't work if the
# socket file already exists.
# TODO: broot should delete the socket file when it closes
# TODO: Add this, and the fish code, to the broot wiki
bind-key -n M-e if-shell "#{@is_vim}" 'send-keys M-e' \
  { \
    run-shell "$TMUX_PLUGIN_MANAGER_PATH"'tmux-sidebar/scripts/toggle.sh '"'"'rm /tmp/broot*; broot --conf "${XDG_CONFIG_HOME:-$HOME/.config}/broot/explorer-conf.hjson;${XDG_CONFIG_HOME:-$HOME/.config}/broot/conf.hjson" --listen #{pane_id},left,50'"'"' #{q:pane_id}' \
  }
# }}}
