# vim:foldmethod=marker

# Miscellaneous {{{
# allow mouse use
set-option -g mouse on
# Set the terminal's color capability to 256 colors. TMUX will then set its $TERM environment variable to this value.
set -g default-terminal "tmux-256color"
# don't allow programs running in a pane to change the window title with an escape sequence
set-option -g allow-rename off
# Let tmux automatically rename windows, unless I manually set a name for that window
set -g automatic-rename on
set -g automatic-rename-format '#{pane_title}'
set-option -g renumber-windows on
setw -g aggressive-resize on
set -s escape-time 0
# have window indices start from 1
set -g base-index 1
set -g prefix C-Space
set -g pane-border-format '#{?#{m/r:copy-mode,#{pane_mode}},#[bold] #{@copy_symbol} COPY ,}'
set-option -g display-time 2000
set-option -g set-titles on
set-option -g set-titles-string '#T'
# When a client becomes active, run attach-session which will update the environment
set-hook -g client-active attach-session
set-option -g allow-passthrough on
# The output from ':checkhealth' in neovim says 'autoread' might not work if this isn't set.
set-option -g focus-events on
set -g set-clipboard on
set-option -g detach-on-destroy off

# Border characters for statusbar indicators
set -g @left_symbol "\ue0b6"
set -g @right_symbol "\ue0b4"

# change highlight color
set -g mode-style "fg=colour0,bg=colour3"
set -g fill-character '╱'

# Enable hyperlinks
set -ga terminal-features "*:hyperlinks"

# Enable underline styles. This way I can have a single underline color while the text above it is in multiple colors.
set -ga terminal-features "*:usstyle"

# Clipboard copying
set -ga terminal-features "*:clipboard"
# TODO: I might not need this if tmux's default copy command works when tmux is being run remotely
set -g copy-command "pbcopy"

set-option -g status-keys emacs

set-option -g history-limit 50000
# }}}

# Bindings {{{
# reorder windows by dragging the mouse
bind-key -n MouseDrag1Status swap-window -d -t=

# Create a new window using the current pane's directory as the new window's directory
bind -n M-t new-window -c "#{pane_current_path}"

# reload
set -g @reload_symbol "\ue348 "
set -g @checkmark_symbol "\uf42e "
bind -n M-r run-shell -b 'tmux source ~/.config/tmux/tmux.conf\; set @mode_indicator_custom_prompt "#[bold bg=#{@bgcolor} fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@checkmark_symbol} RELOADED#[noreverse]#{@right_symbol}"\; refresh-client -S; sleep $(( $(tmux display -p "#{display-time}") / 1000 )); tmux set -u @mode_indicator_custom_prompt\; refresh-client -S'

# Open the url under the cursor in the browser. My terminal can do this, but it doesn't work when
# the url spans multiple lines in a tmux pane, since my terminal is not aware of the tmux pane boundaries.
bind-key -T copy-mode C-MouseUp1Pane select-pane \; run-shell 'tmux-click-url "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" "#{pane_width}" 2>&1' \; send-keys -M
bind-key -T copy-mode-vi C-MouseUp1Pane select-pane \; run-shell 'tmux-click-url "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" "#{pane_width}" 2>&1' \; send-keys -M
bind-key -T root C-MouseUp1Pane select-pane -t = \; run-shell 'tmux-click-url "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}" "#{pane_width}" 2>&1' \; send-keys -M

# Move the cursor if any of the screen lines that the commandline's buffer occupy are clicked.
bind-key -T copy-mode MouseDown1Pane select-pane \; run-shell "tmux-move-cursor '#{mouse_x}' '#{mouse_y}' '#{cursor_x}' '#{cursor_y}' '#{session_id}' '#{window_id}' '#{pane_id}' '#{pane_pid}'" \; send-keys -M
bind-key -T copy-mode-vi MouseDown1Pane select-pane \; run-shell "tmux-move-cursor '#{mouse_x}' '#{mouse_y}' '#{cursor_x}' '#{cursor_y}' '#{session_id}' '#{window_id}' '#{pane_id}' '#{pane_pid}'" \; send-keys -M
bind-key -T root MouseDown1Pane select-pane -t = \; run-shell "tmux-move-cursor '#{mouse_x}' '#{mouse_y}' '#{cursor_x}' '#{cursor_y}' '#{session_id}' '#{window_id}' '#{pane_id}' '#{pane_pid}'" \; send-keys -M

# navigate windows. These keys are sent by the terminal since the actual keys I use don't work now
# since TMUX lost suuport for extended keys.
# TODO: tmux issue: https://github.com/tmux/tmux/issues/2705#issuecomment-841133549
bind-key -n F10 previous-window
bind-key -n F12 next-window

# toggle zoom on pane
bind-key -n M-m resize-pane -Z

# resize panes
bind-key -n M-Left resize-pane -L
bind-key -n M-Right resize-pane -R
bind-key -n M-Up resize-pane -U
bind-key -n M-Down resize-pane -D

# switch windows with alt+<window number>
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Make a new window by clicking the new window button
bind-key -T root MouseUp1StatusRight new-window -c "#{pane_current_path}"

# Go to the previously selected window
bind-key -n M-BSpace last-window

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
set -g @is_vim "ps -o state= -o comm= -t \"$(tmux display-message -p '#{pane_tty}')\" | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "#{@is_vim}" 'send-keys M-h'  'select-pane -L -Z'
bind-key -n M-j if-shell "#{@is_vim}" 'send-keys M-j'  'select-pane -D -Z'
bind-key -n M-k if-shell "#{@is_vim}" 'send-keys M-k'  'select-pane -U -Z'
bind-key -n M-l if-shell "#{@is_vim}" 'send-keys M-l'  'select-pane -R -Z'

# Open context menus on right click
bind-key -T root MouseDown3Pane \
    if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}$}}" \
        { \
            select-pane -t = ; send-keys -M \
        } \
        { \
            display-menu -O -t = -x M -y M \
                "Vertical Split" v { split-window -h -c "#{pane_current_path}" } \
                "Horizontal Split" h { split-window -v -c "#{pane_current_path}" } \
                '' \
                "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } \
                "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } \
                '' \
                Kill X { kill-pane } \
                Respawn R { respawn-pane -k } \
                "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } \
        }
bind-key -T root MouseDown3Status \
    display-menu -O -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y W \
        Kill X { kill-window } \
        Respawn R { respawn-window -k } \
        Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } }
bind-key -T root MouseUp1StatusLeft \
    display-menu -O -t = -x M -y W \
        "New Window" w { new-window } \
        "New Session" s { new-session } \
        "Rename Session" r { command-prompt -I "#S" { rename-session "%%" } } \
        "Choose Session" c { choose-tree -Zs }

bind '|' split-window -h -c '#{pane_current_path}'
bind '-' split-window -v -c '#{pane_current_path}'
bind-key -n M-s choose-tree -Zs
# }}}

# Aesthetics {{{
set -g @bordercolor 'colour8'
set -g @standoutcolor 'colour7'
set -g @bgcolor 'terminal'

# status bar configuration
set -g status-position top
set -g pane-border-status top

# Panes
set -g pane-border-lines single
set -gF pane-active-border-style "fg=terminal"
set -g pane-border-style "fg=colour15"

# Clock Mode
set -g clock-mode-colour 'cyan'
set -g clock-mode-style 24

# Messages
set -g message-style "bg=#{@bgcolor},fg=#{@standoutcolor}"

# Bars
set -g status-interval 1
set -g status on
set -g @accentcolor 'colour6'
set -g @fgcolor 'terminal'
set-hook -g client-focus-out "set -g @accentcolor 'colour15'; set -g @fgcolor 'colour15'"
set-hook -g client-focus-in "set -g @accentcolor 'colour6'; set -g @fgcolor 'terminal'"
set -g status-style "bg=#{@bgcolor},fg=#{@fgcolor},push-default"

# Remove the window status. I'll add it to the statusbar manually
set -g window-status-format ''
set -g window-status-current-format ''

# Left half of status bar
set -g @new_window_symbol "\uea60 "
set -g @zoom_indicator " \U000f0293 "
set -g @superscript_number "python -c \"import sys; index = int(sys.argv[1]); superscript_numbers = ['¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹']; print(superscript_numbers[index - 1] if index <= 9 else '⁺')\""
set -g @window-status-format "#[range=window|#{window_index}]#[fg=colour15]#(#{@superscript_number} #I) #W"
set -g @window-status-current-format "#[range=window|#{window_index}]#[fg=#{@accentcolor}]#(#{@superscript_number} #I)#[fg=default] #W#{?window_zoomed_flag,#[fg=#{@standoutcolor}#,nounderscore]#{@zoom_indicator},}#[nounderscore]"
set -g @window-info-format "#{W: #{E:@window-status-format} , #{E:@window-status-current-format} }#[range=right] #[fg=colour15]#{@new_window_symbol}"
# TODO: Setting this causes the tmux_mode_indicator to rerender which makes the reload indicator flash. Maybe I
# can find a way to only set this if something changes or see if this can be addressed in tmux_mode_indicator.
# Until then, I moved the reload indicator logic to here so it doesn't flash. Now there's a little delay before
# it's shown.
set -g status-left "#{E:@window-info-format}#{tmux_mode_indicator}"
set -g status-left-length 999
if-shell 'tmux show-options -g @config-loaded' {
    set @mode_indicator_custom_prompt "#[bold bg=#{@bgcolor} fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@reload_symbol} RELOADING#[noreverse]#{@right_symbol}"
    refresh-client -S
} {
    set -g @config-loaded "1"
}

# Right half of status bar
set -g @menu-button "#[range=left]#[bg=default,fg=default]󰍜 "
set -g status-right "#{E:@menu-button} "
set -g status-right-length 999

# Popups
set -g popup-border-lines heavy
set -g popup-border-style "fg=#{@bordercolor}"
# }}}

# Plugins {{{
# tmux-better-mouse-mode
set -g @scroll-without-changing-pane "on"
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# tmux-resurrect: Saves the state of tmux to a file so it can be restored later
#
# TODO: I want to restore any arguments that were passed to neovim, but the problem is that the Nix wrapper
# for neovim calls the actual neovim binary with arguments that contain spaces. The only platform
# where resurrect can retain spaces in arguments, without splitting them into separate arguments, is Linux
# with the 'linux_procfs' strategy. So here I only set arguments to be replaced if I'm on Linux.
# issue: https://github.com/tmux-plugins/tmux-resurrect/issues/60
set -g @nvim_resurrect '"~nvim->nvim"'
if-shell "uname | grep -q Linux" {
    # TODO: Restoring commands with spaces is not working on Linux, though it should with procfs as the restore
    # strategy. Until it's fixed, I will not restore arguments on Linux either for the reason in the TODO above.
    set -g @nvim_resurrect '"~nvim->nvim"'
}
set -gF @resurrect-processes 'watch viddy #{@nvim_resurrect} ssh autossh man less tail fzf cloudflared "~nix repl->nix repl"'
# This strategy can restore quotes on the commandline so that the spaces in arguments are retained.
# e.g. `echo 'one argument with spaces'`. Only supports linux though
if-shell "uname | grep -q Linux" "set -g @resurrect-save-command-strategy 'linux_procfs'"
set -g @resurrect-capture-pane-contents 'on'

# tmux-mode-indicator
set -g @prefix_symbol "\U000F030C "
set -g @copy_symbol "\U000f018f "
set -g @sync_symbol "\uf46a "
set -g @mode_indicator_prefix_prompt "#[bold bg=default fg=#{@standoutcolor} align=centre]#[blink]#{@prefix_symbol} PREFIX"
set -g @mode_indicator_sync_prompt "#[bold bg=default fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@sync_symbol} SYNC#[noreverse]#{@right_symbol}"
set -g @mode_indicator_copy_prompt '#[bg=default] '
set -g @mode_indicator_empty_prompt '#[bg=default] '

# tmux-suspend
set -gF @suspended_symbol "\U000F030F "
set -g @suspend_key 'M-z'
# I prepend pane-border-format instead of overwriting it so if two windows are in a mode (e.g. copy and suspended),
# or one window is in two modes, both border indicators will be displayed.
#
# The `#{l:}` is so the formats inside of it don't get evaluated when this variable is set. This way if the active
# pane changes, the suspended icon will move to the newly active pane.
set -g @suspend_suspended_options " \
    pane-border-format::#{l:#{?pane_active\\,#[bold] #{@suspended_symbol} SUSPENDED \\,}}#{s/,/\\\\,/:pane-border-format}, \
"

# tmux-continuum: Uses tmux-resurrect to continuously save the current tmux session at a specified interval.
set -g @continuum-restore 'on' # Automatically restore session when tmux is started
set -g @continuum-save-interval '1' # measured in minutes
# }}}
