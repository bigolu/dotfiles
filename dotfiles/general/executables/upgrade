#!/usr/bin/env fish

# helpers
function print_banner --argument-names message
    echo
    echo -s (set_color blue) $message (set_color normal)
    echo -s (set_color blue) (string repeat --count 40 â”€) (set_color normal)
end

# upgrade/cleanup packages in all package managers
function upgrade
    # NOTE: Should be first because otherwise other tools might try to perform upgrades
    # that have already been performed on another machine and just need to be pulled in.
    # Also, if upgrading a tool results in a dotfile being changed, (e.g. Nix flake.lock)
    # then pulling dotfiles afterwards might cause a merge conflict.
    if pushd ~/.dotfiles
        if git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null
            upgrade-dotfiles
        end
        popd
    end

    type --query nix
    and upgrade-nix

    # NOTE: This should be last so that all changes produced by any upgrade are included in the commit.
    if pushd ~/.dotfiles
        if git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null
            make_commit_in_dotfiles
        end
        popd
    end
end

function upgrade-dotfiles
    print_banner 'DOTFILES'

    # return if there is nothing to pull
    chronic git fetch
    if test -z "$(git log HEAD..@{u} --oneline)"
        echo 'Nothing to do.'
        return
    end

    # Show the new commits that would be pulled
    echo 'Commits made since last pull:'
    git log ..@{u}
    echo

    # if there are changes, warn the user in the prompt
    set status_output "$(git status --porcelain)"
    if test -n "$status_output"
        set warning "$(echo -s (set_color yellow) ' (WARNING: The working directory is not clean)' (set_color normal))"
    else
        set warning ''
    end
    read --prompt-str "Would you like to update$warning? (y/n): " --nchars 1 response
    if test $response = 'y'
        git pull
    end
end

function make_commit_in_dotfiles
    print_banner 'DOTFILES COMMIT'

    # check if there are changes to commit
    set status_output "$(git status --porcelain)"
    if test -n "$status_output"
        git status
        read --prompt-str "Do you want to make a commit to your dotfiles? (y/n): " --nchars 1 response
        if test $response = 'y'
            git add --all
            git commit --message 'chore: upgrade tools'
            git push
        end
    else
        echo 'Nothing to commit.'
    end
end

# There are two types of Nix installations, single and multi user. I use the multi-user installation with two users,
# root and myself. Here I run each nix command once for root and once for the current user, who I assume is myself.
function run_for_each_nix_user --argument-names nix_command
    # Run for the current user
    eval "$nix_command"

    # Run for the root user. Nix determines the current user based on $HOME so I use --set-home to set $HOME to the
    # root user's $HOME.
    eval "sudo --set-home $nix_command"
end
function upgrade-nix
    print_banner 'Nix'

    run_for_each_nix_user 'nix-channel --update'

    # Now that the channels are updated, upgrade the packages.
    run_for_each_nix_user 'nix profile upgrade'

    # Upgrade my host manager flake. This could be home-manager, nix-darwin, etc.
    hostctl-upgrade
end

upgrade $argv
