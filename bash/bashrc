# If not running interactively, don't do anything.
# Reasoning is explained here: https://unix.stackexchange.com/questions/257571/why-does-bashrc-check-whether-the-current-shell-is-interactive
case $- in
    *i*) ;;
      *) return;;
esac

# prompt
CONNECTBAR_DOWN=$'\u250C\u257C'
CONNECTBAR_UP=$'\u2514'
SPLITBAR=$'\u257E\u257C'
ARROW=$'>>'
BORDER_COLOR="\[\033[0;30m\]"
TEXT_COLOR="\[\033[0;34m\]"
RESET_COLOR="\[\033[0m\]"
# get current branch in git repo (adapted from ezprompt.net)
function git_info() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${TEXT_COLOR}${BRANCH}${STAT}${BORDER_COLOR}]$SPLITBAR"
	else
		echo ""
	fi
}
# get current status of git repo (adapted from ezprompt.net)
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}
function python_info() {
	if [ -n "$VIRTUAL_ENV" ]
	then
		# We use the name of the directory that holds the virtual environment as the virtual environment name.
		# Unless the name of that directory is '.venv' in which case we'll use the name of the folder containing '.venv'
		[ `basename $VIRTUAL_ENV` == '.venv' ] && VIRTUAL_ENVIRONMENT_NAME=`echo $VIRTUAL_ENV  | sed -e "s/.*\/\([^/]*\)\/[^/]*/\1/"` || VIRTUAL_ENVIRONMENT_NAME=`basename $VIRTUAL_ENV`
		echo "${BORDER_COLOR}[${TEXT_COLOR}venv: ${VIRTUAL_ENVIRONMENT_NAME}${BORDER_COLOR}]$SPLITBAR"
	else
		echo ""
	fi
}
function user_info() {
	# If this is not an ssh session, then do not display the user info
	if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ]; then
		echo ""
	else
		echo "${BORDER_COLOR}[${TEXT_COLOR}\u@\h${BORDER_COLOR}]$SPLITBAR"
	fi
}
function path_info() {
	echo "${BORDER_COLOR}[${TEXT_COLOR}\w${BORDER_COLOR}]"
}
function job_info() {
	local job_count_escape_sequence='\j'
	local job_count=${job_count_escape_sequence@P}
	if [ "$job_count" -gt '0' ]; then
		local job='job'
		if [ "$job_count" -gt '1' ]; then
			job="${job}s"
		fi
		echo "${BORDER_COLOR}[${TEXT_COLOR}${job_count} ${job}${BORDER_COLOR}]$SPLITBAR"
	else
		echo ''
	fi
}
function set_prompt() {
	PS1="${BORDER_COLOR}${CONNECTBAR_DOWN}$(python_info)$(git_info)$(job_info)$(user_info)$(path_info)\n${BORDER_COLOR}${CONNECTBAR_UP}${ARROW} ${RESET_COLOR}"
}
# We set the PS1 through PROMPT_COMMAND so that the PS1 will get reevaluated each time.
# It needs to be reevaluated each time so things like the git branch can get recalculated
PROMPT_COMMAND="set_prompt"
# call it now so that the code below references the correct prompt
set_prompt

# general
export PAGER='less -RF'
export LESS="-Ri"
export VISUAL=vim
export EDITOR="$VISUAL"
# use blinking bar for bash cursor
echo -ne '\033[5 q'

# bash
# remove duplicates in bash history
HISTCONTROL=ignoredups:erasedups
# enable programmable completion features
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
# cd into directory without having to type cd
shopt -s autocd
# Prevent overwriting a file with the '>' operator
set -C
# aliases
source ~/.config/bash/complete_alias
make_alias_and_enable_autocomplete() {
	if [ $# -ne 2 ]; then
			echo -e "\e[31mError: Two arguments are required, the alias name and the command it should be expanded to. \nExample: ${FUNCNAME[0]} la 'ls -a'\e[m" >>/dev/stderr
			return 1
	fi

	alias "$1"="$2"
	# If the function is defined, call it
	[[ "$(declare -fF _complete_alias)" ]] && complete -F _complete_alias "$1";
}
make_alias_and_enable_autocomplete 'r' "source ~/.bashrc && hash -r"
make_alias_and_enable_autocomplete 'r-desktop-entries' 'update-desktop-database ~/.local/share/applications'
make_alias_and_enable_autocomplete 'r-xbindkeys' 'killall xbindkeys; xbindkeys'
make_alias_and_enable_autocomplete 'r-kitty' 'reload-kitty'
make_alias_and_enable_autocomplete 'r-asdf' 'asdf reshim'
make_alias_and_enable_autocomplete 'r-tmux' 'tmux source ~/.tmux.conf && tmux display-message "Reloaded TMUX..."'
make_alias_and_enable_autocomplete 'r-tmux-plugins' "$HOME/.tmux/plugins/tpm/bindings/install_plugins"
r_tmux_server() {
	if tmux list-sessions &> /dev/null; then
		# save server state before killing it
		~/.tmux/plugins/tmux-resurrect/scripts/save.sh
		tmux kill-server
	fi

	tmux
}
make_alias_and_enable_autocomplete 'r-tmux-server' 'r_tmux_server'
make_alias_and_enable_autocomplete 'r-tmux-pane' 'tmux respawn-pane -k'
make_alias_and_enable_autocomplete 'trash' 'trash-put'
make_alias_and_enable_autocomplete 'pbcopy' 'xclip -selection clipboard'
make_alias_and_enable_autocomplete 'pbpaste' 'xclip -selection clipboard -o'
make_alias_and_enable_autocomplete 'ls' 'ls --classify'
make_alias_and_enable_autocomplete 'la' 'ls -a'
make_alias_and_enable_autocomplete 'll' 'ls -l'
make_alias_and_enable_autocomplete 'lal' 'ls -al'
make_alias_and_enable_autocomplete 'tree' 'rg --color=never --files | \tree --fromfile  .'
# Quick way to reconnect to tmux after a restart/closed-terminal.
# This command connects to a running session, or if there isn't one, it just
# launches tmux, in which case tmux-resurrect should restore the entire tmux environment
make_alias_and_enable_autocomplete 'ta' 'tmux a || tmux'
tunnel() { cloudflared tunnel run --url "http://localhost:$1"; }
mktouch() { mkdir -p "$(dirname "$1")" && touch "$1" ; }
make_alias_and_enable_autocomplete 'sai' 'sudo apt install'
make_alias_and_enable_autocomplete 'sar' 'sudo apt remove'
make_alias_and_enable_autocomplete 'saar' 'sudo apt autoremove'
make_alias_and_enable_autocomplete 'ap' 'apt policy'
make_alias_and_enable_autocomplete 'sau' 'sudo apt update'
bd() { cd `command bd "$@"`; }

#fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
bind -x '"\C-f": fzf-file-widget'
bind -x '"\C-r": __fzf_history__'
source ~/.config/bash/fzf-bash-completion.sh
# use my prompt as the loading message so that there isn't a quick flash of loading text
# taken from: https://github.com/lincheney/fzf-tab-completion#custom-loading-message
_fzf_bash_completion_loading_msg() {
	echo "${PS1@P}${READLINE_LINE}" | tail -n1
}
_fzf_bash_completion_prompt() {
	echo "${PS1@P}" | tail -n1;
}
bind -x '"\t": fzf_bash_completion'
export FZF_DEFAULT_COMMAND="rg --files"
export FZF_COMPLETION_TRIGGER="*"
export FZF_DEFAULT_OPTS="
	--multi
	--cycle
	--bind tab:down,shift-tab:up,alt-enter:toggle,alt-down:last,alt-up:first,backward-eof:abort
	--header 'move [↓↑ or tab/shift-tab], select [enter], select multiple items [alt+enter]'
	--layout=reverse
	--color='bg+:-1,fg+:blue,info:black,gutter:black,pointer:blue,prompt:black:regular,border:black,query:-1:regular,marker:blue,header:yellow,spinner:yellow,hl:cyan,hl+:cyan'
	--padding=0,0,1,0
	--prompt='$(echo "${PS1@P}" | tail -n1;)'
	--preview-window=wrap,60%
	--keep-right"
export FZF_ALT_C_COMMAND="rg --files --null | xargs -0 dirname | sort -u"
export FZF_ALT_C_OPTS="--height 90% --preview '\tree -C {} | head -200'"
export FZF_CTRL_T_OPTS='--preview "head -100 {}" --height 90%'
export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND
fzf() {
	# calculate fzf preview window position based on terminal window orientation
	local preview_window_position lines columns
	if [ -n "$IN_TMUX" ]; then
		lines="$(tmux display -p '#{pane_height}' | xargs echo -n)"
		columns="$(tmux display -p '#{pane_width}' | xargs echo -n)"
	else
		lines=$LINES
		columns=$COLUMNS
	fi
	# bash does not have floating point numbers so in order to get precision to the
	# tenths place, I multiply the dividend by 10, as well as the ratio I compare it to (3.1 * 10)
	local column_to_line_ratio=$((($columns * 10) / $lines))
	# This column_to_line_ratio is relative to the line height and column width of your terminal so it may need to be tweaked a bit.
	# The column_to_line_ratio used here was calculated using the font 'Fira Code', size 14, line height 150%, and column width 100%
	local preview_window_position
	if [ $column_to_line_ratio -lt 31 ]; then # terminal window is in portrait
		preview_window_position="bottom"
	else # terminal window is in landscape
		preview_window_position="right"
	fi

	command fzf "--preview-window=$preview_window_position" "$@"
}

# asdf
# Part of asdf initialization is adding shims. This means that if the bashrc
# gets reloaded, then asdf will add its shims again. This could be an issue if
# the bashrc gets reloaded while you're inside a python virtual environment
# since the asdf shims may override the virtual environment shims.
# To get around this, we make sure asdf is only initialized once by setting
# a variable after init and only initializing asdf if that variable doesn't exist.
if [ -z "$ASDF_INITIALIZED" ]; then
	# Init asdf. This needs to be done after the PATH has been set
	# and any frameworks, like oh-my-zsh, have been sourced
	source $HOME/.asdf/asdf.sh
	# Set this variable so we can tell if asdf has been initialized.
	# It purposely isn't exported so that sub shells (e.g. tmux shells)
	# don't inherit the value. This way sub shells perform initialization as well.
	ASDF_INITIALIZED=1
fi
# configure completions
source $HOME/.asdf/completions/asdf.bash
export ASDF_VIM_CONFIG="\
	--enable-fail-if-missing \
	--with-tlib=ncurses \
	--with-features=huge \
	--with-compiledby=asdf \
	--enable-multibyte \
	--enable-cscope \
	--enable-terminal \
	--enable-perlinterp \
	--enable-rubyinterp \
	--enable-python3interp \
	--enable-luainterp \
	--with-x \
	--enable-gui=no"

# python
export VIRTUAL_ENV_DISABLE_PROMPT=1

# rg
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# rust
# compile, run, and remove the binary
function rust() {
    name=$(basename $1 .rs)
    rustc $@ && ./$name && rm $name
}

# zoxide
eval "$(zoxide init bash --cmd cd)"
cd() { __zoxide_z "$@" && ls; }
