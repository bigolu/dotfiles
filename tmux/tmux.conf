# vim:foldmethod=marker

# Miscellaneous {{{
# allow mouse use
set-option -g mouse on
# let colors pass through
set -g default-terminal "tmux-256color"
# don't allow programs running in a pane to change the window title with an escape sequence
set-option -g allow-rename off
# Let tmux automatically rename windows, unless I manually set a name for that window
set -g automatic-rename on
set-option -g renumber-windows on
bind-key -n MouseDrag1Status swap-window -d -t=
setw -g aggressive-resize on
set -s escape-time 0
# have window indices start from 1
set -g base-index 1
set -g prefix C-Space
set -g pane-border-format ''
set-option -g display-time 2000
set-option -g set-titles on
set-option -g set-titles-string '#T'
# By setting a default-command, tmux won't use its default behaviour which creates a login shell
# for new windows. The 'exec' is there so that tmux-resurrect works properly.
set -g default-command "exec ${SHELL}"
# When a client becomes active, run attach-session which will update the environment
set-hook -g client-active attach-session
set-option -g allow-passthrough on
# The output from ':checkhealth' in neovim says 'autoread' might not work if this isn't set.
set-option -g focus-events on
set -g set-clipboard on

# Create a new window using the current pane's directory as the new window's directory
bind t new-window -c "#{pane_current_path}"
# split panes horizontally/vertically using the current pane's directory as the new pane's directory
bind '|' split-window -h -c '#{pane_current_path}'
bind '-' split-window -v -c '#{pane_current_path}'
bind-key -n M-s choose-tree -Zs

# Border characters for statusbar indicators
set -g @left_symbol "\ue0b6"
set -g @right_symbol "\ue0b4"

# reload
set -g @reload_symbol "\ue348 "
bind r run-shell -b 'tmux source ~/.tmux.conf\; set @mode_indicator_custom_prompt "#[bold bg=#{@bgcolor} fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@reload_symbol} RELOADED#[noreverse]#{@right_symbol}"\; refresh-client -S; sleep $(( $(tmux display -p "#{display-time}") / 1000 )); tmux set -u @mode_indicator_custom_prompt\; refresh-client -S'

bind-key -T copy-mode MouseDown1Pane select-pane \; run-shell 'tmux-click-url.py "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}"'
bind-key -T copy-mode-vi MouseDown1Pane select-pane \; run-shell 'tmux-click-url.py "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}"'
bind-key -T root MouseDown1Pane select-pane -t = \; run-shell 'tmux-click-url.py "#{mouse_x}" "#{mouse_y}" "#{pane_current_command}" "#{scroll_position}" "#{mouse_hyperlink}"' \; send-keys -M

# navigate windows
bind-key -n M-H previous-window
bind-key -n M-L next-window
# toggle zoom on pane
bind-key -n M-m resize-pane -Z
# change highlight color
set -g mode-style "fg=terminal,bg=colour8"
set -g fill-character '╱'
# resize panes
bind-key -n M-Left resize-pane -L
bind-key -n M-Right resize-pane -R
bind-key -n M-Up resize-pane -U
bind-key -n M-Down resize-pane -D
# switch windows with alt+<window number>
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9
bind-key -T root MouseDown1StatusRight new-window -c "#{pane_current_path}"

# scratchpad session
bind -n M-t if-shell -F '#{==:#{session_name},scratch}' {
    switch-client -p
} {
    new-session -A -c '#{pane_current_path}' -s scratch 
}

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" 'send-keys M-h'  'select-pane -L -Z'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j'  'select-pane -D -Z'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k'  'select-pane -U -Z'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l'  'select-pane -R -Z'

# Enable hyperlinks
set -ga terminal-features "*:hyperlinks"

# Clipboard copying
set -ga terminal-features "*:clipboard"
# TODO: I might not need this if tmux's default copy command works when tmux is being run remotely
if-shell "command -v osc-copy" {
    set -g copy-command "osc-copy"
}

# Context menus stay up after releasing the mouse
bind-key    -T root         MouseDown3Pane        if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}$}}" { select-pane -t = ; send-keys -M } { display-menu -O -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer -w "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer -w "#{q:mouse_line}" } '' "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer -w "#{q:mouse_hyperlink}" } '' "Vertical Split" v { split-window -h } "Horizontal Split" h { split-window -v } '' "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } '' Kill X { kill-pane } Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z } }
bind-key    -T root         MouseDown3Status      display-menu -O -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y W "#{?#{>:#{session_windows},1},,-}Swap Left" l { swap-window -t :-1 } "#{?#{>:#{session_windows},1},,-}Swap Right" r { swap-window -t :+1 } "#{?pane_marked_set,,-}Swap Marked" s { swap-window } '' Kill X { kill-window } Respawn R { respawn-window -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } } '' "New After" w { new-window -a } "New At End" W { new-window }
bind-key    -T root         MouseDown3StatusLeft  display-menu -O -T "#[align=centre]#{session_name}" -t = -x M -y W Next n { switch-client -n } Previous p { switch-client -p } '' Renumber N { move-window -r } Rename n { command-prompt -I "#S" { rename-session "%%" } } '' "New Session" s { new-session } "New Window" w { new-window } "Choose Session" alt+s { choose-tree -Zs }
bind-key    -T root         M-MouseDown3Pane      display-menu -O -T "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer -w "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer -w "#{q:mouse_line}" } '' "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer -w "#{q:mouse_hyperlink}" } '' "Vertical Split" v { split-window -h } "Horizontal Split" h { split-window -v } '' "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } '' Kill X { kill-pane } Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z }
bind-key    -T prefix       <                     display-menu -O -T "#[align=centre]#{window_index}:#{window_name}" -x W -y W "#{?#{>:#{session_windows},1},,-}Swap Left" l { swap-window -t :-1 } "#{?#{>:#{session_windows},1},,-}Swap Right" r { swap-window -t :+1 } "#{?pane_marked_set,,-}Swap Marked" s { swap-window } '' Kill X { kill-window } Respawn R { respawn-window -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } } '' "New After" w { new-window -a } "New At End" W { new-window }
bind-key    -T prefix       >                     display-menu -O -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c { copy-mode -q ; set-buffer -w "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" l { copy-mode -q ; set-buffer -w "#{q:mouse_line}" } '' "#{?mouse_hyperlink,Type #[underscore]#{=/9/...:mouse_hyperlink},}" C-h { copy-mode -q ; send-keys -l "#{q:mouse_hyperlink}" } "#{?mouse_hyperlink,Copy #[underscore]#{=/9/...:mouse_hyperlink},}" h { copy-mode -q ; set-buffer -w "#{q:mouse_hyperlink}" } '' "Vertical Split" v { split-window -h } "Horizontal Split" h { split-window -v } '' "#{?#{>:#{window_panes},1},,-}Swap Up" u { swap-pane -U } "#{?#{>:#{window_panes},1},,-}Swap Down" d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" s { swap-pane } '' Kill X { kill-pane } Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" z { resize-pane -Z }

set-option -g status-keys emacs

set-option -g history-limit 50000
# }}}

# Aesthetics {{{
set -g @bordercolor 'colour8'
set -g @standoutcolor 'colour6'
set -g @bgcolor 'terminal'

# status bar configuration
set -g status-position bottom
set -g pane-border-status bottom

# Panes
set -g pane-border-lines single
set -g pane-active-border-style "fg=colour15"
set -g pane-border-style "fg=colour8"

# Clock Mode
set -g clock-mode-colour 'cyan'
set -g clock-mode-style 24

# Messages
set -g message-style "bg=#{@bgcolor},fg=#{@standoutcolor}"

# Bars
set -g status-interval 1
set -g status on
set -g status-style "bg=#{@bgcolor},fg=terminal,push-default"

# Remove the window status. I'll add it to the statusbar manually
set -g window-status-format ''
set -g window-status-current-format ''

set -g @internet_connected_symbol "\uf1eb "
set -g @internet_disconnected_symbol "\uf1eb "
set -g @new_window_symbol "＋"
set -g @zoom_indicator "\uf792 "
set -g @superscript_number "python -c \"import sys; index = int(sys.argv[1]); superscript_numbers = ['¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹']; print(superscript_numbers[index - 1] if index <= 9 else '⁺')\""
set -g @window-status-format "#[range=window|#{window_index}]#[fg=colour15]#(#{@superscript_number} #I) #W"
set -g @window-status-current-format "#[range=window|#{window_index}]#[fg=colour6]#(#{@superscript_number} #I)#[fg=terminal] #W#{?window_zoomed_flag,#[fg=#{@standoutcolor}#,nounderscore]#{@zoom_indicator},}#[nounderscore]"
set -g @window-info-format "#{W: #{E:@window-status-format} , #{E:@window-status-current-format} }#[range=right] #[fg=colour15]#{@new_window_symbol} "
set -g status-left "#{E:@window-info-format}  #{tmux_mode_indicator}"
set -g status-left-length 999

set -g @volume_symbol "\uf028 "
set -g @volume-percentage "#(${TMUX_PLUGIN_MANAGER_PATH}tmux-plugin-volume/scripts/volume_percentage.sh)"
set -g @volume-tray-icon "#[fg=default]#{?#{E:@volume-percentage},#{@volume_symbol}#{E:@volume-percentage}%,}"
set -g @get_battery_icon "python -c \"import sys; print([['\uf579','\uf57a','\uf57b','\uf57d','\uf57e','\uf57f','\uf580','\uf581'], ['\uf585','\uf585','\uf586','\uf587','\uf588','\uf589','\uf58a','\uf584'], ['\uf590'] * 8][int(sys.argv[1])][int(sys.argv[2])] + ' ');\""
set -g @battery-percentage "#[fg=default]#(${TMUX_PLUGIN_MANAGER_PATH}tmux-battery/scripts/battery_percentage.sh)"
set -g @battery-status-script "${TMUX_PLUGIN_MANAGER_PATH}tmux-battery/scripts/battery_icon_status.sh"
set -g @battery-status "#(#{@battery-status-script})"
set -g @battery-charge-script "${TMUX_PLUGIN_MANAGER_PATH}tmux-battery/scripts/battery_icon_charge.sh"
set -g @battery-charge "#(#{@battery-charge-script})"
set -g @battery-status-fg "#(${TMUX_PLUGIN_MANAGER_PATH}tmux-battery/scripts/battery_color_status.sh fg)"
set -g @battery-charge-fg "#(${TMUX_PLUGIN_MANAGER_PATH}tmux-battery/scripts/battery_color_charge.sh fg)"
set -g @battery-icon-color "#{?#{==:#{E:@battery-status},1},#{E:@battery-status-fg},#{E:@battery-charge-fg}}"
set -g @battery-icon "#{E:@battery-icon-color}#(#{@get_battery_icon} \"$(#{@battery-status-script})\" \"$(#{@battery-charge-script})\")"
set -g @battery-tray-icon "#{?#{E:@battery-percentage}, #{E:@battery-icon}#{E:@battery-percentage},}"
set -g @separator "#[fg=colour8]│"
set -g @datetime "#[fg=default]%a, %b %-e %H:%M:%S"
set -g @online-tray-icon "#(${TMUX_PLUGIN_MANAGER_PATH}tmux-online-status/scripts/online_status_icon.sh)"
set -g @tray-icons "#{E:@online-tray-icon}  #{E:@volume-tray-icon} #{E:@battery-tray-icon}"
set -g @tty-info "#{?#{m/r:tty[0-9]*,#{client_tty}},#{E:@tray-icons} #{E:@separator} #{E:@datetime} #{E:@separator} ,}"
set -g @session "#[range=left]#[bg=default,fg=default]#S"
set -g status-right "#{E:@tty-info}#{E:@session} "
set -g status-right-length 999

set -g popup-border-lines heavy
set -g popup-border-style "fg=#{@bordercolor}"
# }}}

# Plugins {{{
# tmux plugin manager
set -g @plugin 'tmux-plugins/tpm'

set -g @plugin 'nhdaly/tmux-better-mouse-mode'
    set -g @scroll-without-changing-pane "on"
    set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"

# Saves the state of tmux to a file so it can be restored later
set -g @plugin 'tmux-plugins/tmux-resurrect'
    set -g @resurrect-processes 'watch mosh-client vim nvim ssh autossh man less tail fzf "git ui" gitui ncdu "~tmux-nest" cloudflared'
    # This strategy can restore quotes, unlike the default strategy.
    if-shell "uname | grep -q Linux" "set -g @resurrect-save-command-strategy 'linux_procfs'"

# auto reload ~/.tmux.conf when it changes
set-option -g @plugin 'b0o/tmux-autoreload'

set -g @plugin 'MunifTanjim/tmux-mode-indicator'
    set -g @prefix_symbol "\uf80b "
    set -g @copy_symbol "\uf68e "
    set -g @sync_symbol "\uf46a "
    set -g @mode_indicator_prefix_prompt "#[bold bg=default fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@prefix_symbol} PREFIX#[noreverse]#{@right_symbol}"
    set -g @mode_indicator_copy_prompt "#[bold bg=default fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@copy_symbol} COPY#[noreverse]#{@right_symbol}"
    set -g @mode_indicator_sync_prompt "#[bold bg=default fg=#{@standoutcolor} align=centre]#{@left_symbol}#[reverse]#{@sync_symbol} SYNC#[noreverse]#{@right_symbol}"
    set -g @mode_indicator_empty_prompt '#[bg=default] '

set -g @plugin 'MunifTanjim/tmux-suspend'
    set -g @suspended_symbol "\uf80e "
    set -g @suspend_key 'M-z'
    set -g @suspend_suspended_options " \
        pane-active-border-style::fg=#{@standoutcolor} dim, \
        pane-border-style::fg=#{@bordercolor} dim, \
        @mode_indicator_custom_prompt::#[italics bg=default fg=#{@standoutcolor} align=centre]#{@suspended_symbol} suspended, \
        status-style::dim, \
    "

set -g @plugin 'tmux-plugins/tmux-battery'
    set -g @batt_color_charge_primary_tier8 'default'
    set -g @batt_color_charge_primary_tier7 'default'
    set -g @batt_color_charge_primary_tier6 'default'
    set -g @batt_color_charge_primary_tier5 'default'
    set -g @batt_color_charge_primary_tier4 'default'
    set -g @batt_color_charge_primary_tier3 'default'
    set -g @batt_color_charge_primary_tier2 'colour1'
    set -g @batt_color_charge_primary_tier1 'colour1'
    set -g @batt_color_status_primary_charged 'colour2'
    set -g @batt_color_status_primary_charging 'colour3'
    set -g @batt_color_status_primary_unknown '0'
    set -g @batt_color_status_primary_discharging '0'
    set -g @batt_icon_status_discharging "0"
    set -g @batt_icon_status_charging "1"
    set -g @batt_icon_status_charged "1"
    set -g @batt_icon_status_unknown "2"
    set -g @batt_icon_charge_tier8 "7"
    set -g @batt_icon_charge_tier7 "6"
    set -g @batt_icon_charge_tier6 "5"
    set -g @batt_icon_charge_tier5 "4"
    set -g @batt_icon_charge_tier4 "3"
    set -g @batt_icon_charge_tier3 "2"
    set -g @batt_icon_charge_tier2 "1"
    set -g @batt_icon_charge_tier1 "0"

set -g @plugin 'tmux-plugins/tmux-online-status'
    set -g @online_icon "#[fg=colour4] #{@internet_connected_symbol}"
    set -g @offline_icon "#[fg=colour1] #{@internet_disconnected_symbol}"

set -g @plugin 'levex/tmux-plugin-volume'

# Uses tmux-resurrect to continuously save the current tmux session at a specified interval.
# NOTE: continuum must be the last plugin listed: https://github.com/tmux-plugins/tmux-continuum#known-issues
set -g @plugin 'tmux-plugins/tmux-continuum'
    set -g @continuum-restore 'on' # Automatically restore session when tmux is started
    set -g @continuum-save-interval '1' # measured in minutes

# Start the plugin manager
run '~/.tmux/plugins/tpm/tpm'
# }}}
