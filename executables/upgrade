#!/bin/env fish

# helpers
function print_banner --argument-names message
    echo
    echo -s (set_color blue) $message (set_color normal)
    echo -s (set_color blue) (string repeat --count 40 â”€) (set_color normal)
end

# upgrade/cleanup packages in all package managers
function upgrade
    # If arguments are passed, assume they are package manager names and only upgrade those ones
    if test (count $argv) -gt 0
        for package_manager in $argv
            set function_name "upgrade-$package_manager"
            if functions --query $function_name
                eval $function_name
            else
                echo -e -s \n (set_color red) "error: No upgrader found for '$package_manager'"
            end
        end

        return
    end

    # NOTE: Should be first because otherwise other tools might try to perform upgrades
    # that have already been performed on another machine and just need to be pulled in.
    # Also, if upgrading a tool results in a dotfile being changed, (e.g. neovim snapshot)
    # then pulling dotfiles afterwards might cause a merge conflict.
    if pushd ~/.dotfiles
        if git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null
            upgrade-dotfiles
        end
        popd
    end

    type --query aptitude
    and upgrade-debian

    type --query brew
    and upgrade-brew

    type --query flatpak
    and upgrade-flatpak

    type --query asdf
    and upgrade-asdf

    type --query fisher
    and upgrade-fisher

    type --query pipx
    and upgrade-pipx

    type --query nvim
    and upgrade-nvim

    type --query kitty
    and upgrade-kitty

    type --query pip
    and upgrade-pip

    type --query cargo
    and upgrade-cargo

    if pushd ~/.dotfiles
        if git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null
            make_commit_in_dotfiles
        end
        popd
    end
end

function upgrade-debian
    print_banner 'DEBIAN'

    sudo aptitude update
    if string match --regex --quiet '[1-9]\d* packages upgraded' (aptitude --simulate --assume-yes safe-upgrade)
        set something_to_do
        sudo aptitude safe-upgrade
    end
    if string match --regex --quiet '[1-9]\d* to remove' (aptitude --simulate --assume-yes -o Aptitude::Delete-Unused=1 install)
        set something_to_do
        sudo aptitude --assume-yes -o Aptitude::Delete-Unused=1 install
    end

    if not set --query something_to_do
        echo 'Nothing to do.'
    end
end

function upgrade-brew
    print_banner 'HOMEBREW'

    brew update
    if test -n "$(brew outdated --fetch-HEAD)"
        set something_to_do
        brew outdated --fetch-HEAD
        read --prompt-str 'Would you like to upgrade? (y/n): ' --nchars 1 response
        if test $response = 'y'
            brew upgrade --fetch-HEAD
        end
    end
    if test -n "$(brew autoremove --dry-run)"
        set something_to_do
        brew autoremove
    end
    if test -n "$(brew cleanup --dry-run)"
        set something_to_do
        brew cleanup
    end

    if not set --query something_to_do
        echo 'Nothing to do.'
    end
end

function upgrade-flatpak
    print_banner 'FLATPAK'

    # TODO: When I do `yes | <this script>` instead of a 'y' being entered for the
    # `flatpak update` prompt, an 'n' is entered. As a workaround, I am doing the prompting
    # myself.
    if test -n "$(flatpak remote-ls --updates 2>/dev/null)"
        flatpak remote-ls --updates
        read --prompt-str 'Would you like to upgrade? (y/n): ' --nchars 1 response
        if test $response = 'y'
            flatpak update --assumeyes
        end
    else
        echo 'Nothing to do.'
    end
end

function upgrade-fisher
    print_banner 'FISHER'
    # TODO: If I pipe the command `yes` into this script, the command below stalls for a while.
    # Not sure what's going on, but for now I'll suppress standard input.
    fisher update </dev/null
end

function upgrade-asdf
    print_banner 'ASDF'

    asdf plugin-update --all

    # update tools
    for tool in (asdf plugin-list)
        set version_prefix ''
        if test $tool = 'java'
            set version_prefix 'temurin-'
        end

        set current_version (asdf current $tool | string split --no-empty --fields 2 -- ' ')
        if test -z "$current_version"
            continue # error
        end
        if test $current_version = 'system'
            continue
        end

        set latest_version (asdf latest $tool $version_prefix)
        if test -z "$latest_version"
            continue # error
        end
        and test $current_version != $latest_version
        and asdf install $tool $latest_version
        and asdf global $tool $latest_version
        and asdf uninstall $tool $current_version
    end
end

function upgrade-pipx
    print_banner 'PIPX'
    pipx upgrade-all --include-injected
end

function upgrade-nvim
    print_banner 'NEOVIM'

    # This way we don't check for updates in plugins that aren't being used
    echo -n 'Removing unused plugins... '
    nvim --headless -i NONE -c 'PlugClean!' -c 'qa'
    echo 'done'

    set plugin_count (ls ~/.local/share/nvim/plugged | wc -l)
    set current_plugin_number 1
    for plugin_directory in ~/.local/share/nvim/plugged/*
        echo -n -e -s 'Checking plugins for updates: ' $current_plugin_number '/' $plugin_count \r
        chronic git -C $plugin_directory fetch
        if test -n "$(git -C $plugin_directory log HEAD..origin/HEAD --oneline)"
            set is_outdated
            break
        end

        set current_plugin_number (math $current_plugin_number + 1)
    end
    # clear current line, which has the progress indicator
    echo -e -n '\33[2K'

    curl --silent --fail --location https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
        | chronic diff - ~/.local/share/nvim/site/autoload/plug.vim
    or set is_outdated

    if not set --query is_outdated
        echo 'Nothing to do.'
        return
    end

    read --prompt-str 'Would you like to update? (y/n): ' --nchars 1 response
    if test $response = 'y'
        # I explicitly set the input file to the terminal in case this command is run in a pipeline.
        # For exmaple: `yes | <this_script>`.
        nvim -c 'autocmd VimEnter * MyPlugUpdate' </dev/tty
    end
end

function upgrade-dotfiles
    print_banner 'DOTFILES'

    # return if there is nothing to pull
    chronic git fetch
    if test -z "$(git log HEAD..@{u} --oneline)"
        echo 'Nothing to do.'
        return
    end

    # Show the new commits that would be pulled
    echo 'Commits made since last pull:'
    git log ..@{u}
    echo

    # if there are changes, warn the user in the prompt
    set status_output "$(git status --porcelain)"
    if test -n "$status_output"
        set warning "$(echo -s (set_color yellow) ' (WARNING: The working directory is not clean)' (set_color normal))"
    else
        set warning ''
    end
    read --prompt-str "Would you like to update$warning? (y/n): " --nchars 1 response
    if test $response = 'y'
        git pull
    end
end

function upgrade-kitty
    print_banner 'KITTY'

    set latest_version "$(git ls-remote --refs --sort='version:refname' --tags 'https://github.com/kovidgoyal/kitty.git' | cut -d/ -f3- | tail -n 1 | cut -c 2-)"
    set current_version "$(kitty -v | string match --regex --groups-only '(\d+\.\d+\.\d+)')"
    if test "$latest_version" != "$current_version"
        set prompt "There is a new version of kitty (current=$current_version, latest=$latest_version) would you like to update? (y/n):"
        read --prompt-str $prompt --nchars 1 response
        if test $response = 'y'
            curl --location https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
        end
    else
        echo 'Nothing to do.'
    end
end

function upgrade-pip
    print_banner 'PIP'

    set upgradable_packages (pip --disable-pip-version-check list --outdated --format=json | python -c "import json, sys; print('\n'.join([x['name'] for x in json.load(sys.stdin)]), end='')")
    if test (count $upgradable_packages) -gt 0
        for package in $upgradable_packages
            pip install --upgrade $package
        end
    else
        echo 'Nothing to do.'
    end
end

function upgrade-cargo
    print_banner 'CARGO'
    cargo --list | grep -q 'install-update'
    and cargo install-update --all
end

function make_commit_in_dotfiles

    # check if there are changes to commit
    set status_output "$(git status --porcelain)"
    if test -n "$status_output"
        read --prompt-str "Do you want to make a commit to your dotfiles? (y/n): " --nchars 1 response
        if test $response = 'y'
            git add --all
            git commit --message 'chore: upgrade tools'
        end
    end
end

upgrade $argv
